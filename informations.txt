A web interface the is the web app to interact with students. This involves front-end as well as usual web development stuff - session handling, databases, user data, validation, etc. I strongly advice you to use an MVC framework for this part of you Online Judge. For PHP you can use Laravel or Codeignitor. However I would still recommend using a better framework like Django (Python) and Rails (Ruby). The choice of front end depends on you. I highly recommend learning Angular and Angular Material.

The Judge will be the part of the application which is responsible for actually running the code submitted by the students on the server. The judge is the main-frame for your application. You will basically run multiple workers to do the automatic judging for you. You cannot judge in a synchronous fashion because judging will take some time and a single HTTP Request-Response cycle cannot handle it. It has several sub-parts:

  Task Queue - Use technologies like Celery and RabbitMQ(Advance Message Queuing Protocol) to create a distributed task queue where you will just queue your solution for judging and worker node will pick up the tasks, run it and update the result - all asynchronously and independently.
  
  SandBoxing - You do not want to burden your working nodes with the malicious code submitted by students. Imagine if someone creates 100s of threads via their code or someone makes a http request programmatically to fetch solution. You want to prevent the mis-use of resources. There are several tools that can be used to restrict the resources that the code may use -SECCOMP, CHROOT and ULIMIT. These are basic linux tools. There is also Java Security Manager. This combined with a level of virtualisation should be sufficient. You can run your code inside a docker container and limit the resources allocated to the container. Docker containers are standalone processes and I do not think that it is easy to break them.
  
  Post-Judge Results - Here you would want to implement a plagiarism check. Good news is that there is already a very good software called MOSS (http://moss.stanford.edu) which is free to use.
  
Admin Interface - Here you will have to make a separate admin interface using which a professor may create new problems and assignments for students to solve.

Data Backend - Probably SQL may be sufficient for your needs. But if you are trying to make your system scalable and want to use better technologies you want to use NoSQL databases. That means you will have to learn MongoDB or something similar. If you choose to deploy your application on cloud you may use Amazon's DynamoDB or Google's Cloud Datastore.

Deployment - I am sure this is much bigger of a problem than it sounds. You may use an institute-provided server however not many institute have those kinds of servers that will be able to provide enough computing resources. In a single lab of say 2 hours there may be 3 problems. Pessimistically let us assume that each student will submit 10 solutions for each problem. We will also assume the number of student to be 100. That is like 30 * 100 = 3000 solutions. Now each problem will typically have 5-10 test cases. So let us assume that the total number executions required are 20,000. In 2 hrs you have to execute 20,000 codes and compile 3000 codes. That is close to 167 executions per minute. Numbers are scary if you ask me. Many institute have good enough servers for this task however after researching a bit I have realised that such servers are difficult to find in non-{X}ITs where X belongs to {I, II, N, B}. So you may have to go for cloud servers. Amazon is my obvious choice for infrastructure.

There are lot of other small bottlenecks like in-browser editor, syntax highlighting, web security, logical consistency, access control, logging, etc. These can be easily solved though.
